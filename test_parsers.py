#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä—Å–µ—Ä–æ–≤
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_kleinanzeigen():
    """–¢–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–∞ Kleinanzeigen"""
    print("=" * 60)
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Kleinanzeigen Parser")
    print("=" * 60)
    
    try:
        from kleinanzeigen_parser import KleinanzeigenParser
        
        parser = KleinanzeigenParser("config.json")
        print("‚úì –ü–∞—Ä—Å–µ—Ä —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        parser.cursor.execute("SELECT COUNT(*) FROM listings")
        count = parser.cursor.fetchone()[0]
        print(f"‚úì –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –ù–∞–π–¥–µ–Ω–æ {count} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram
        if parser.bot:
            print("‚úì Telegram –±–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω")
        else:
            print("‚ö† Telegram –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        return True
        
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False


def test_immowelt():
    """–¢–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–∞ Immowelt"""
    print("\n" + "=" * 60)
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Immowelt Parser")
    print("=" * 60)
    
    try:
        from immowelt_parser import ImmoweltParser
        
        parser = ImmoweltParser("config.json")
        print("‚úì –ü–∞—Ä—Å–µ—Ä —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        parser.cursor.execute("SELECT COUNT(*) FROM listings WHERE id LIKE 'immowelt_%'")
        count = parser.cursor.fetchone()[0]
        print(f"‚úì –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –ù–∞–π–¥–µ–Ω–æ {count} –æ–±—ä—è–≤–ª–µ–Ω–∏–π Immowelt")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram
        if parser.bot:
            print("‚úì Telegram –±–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω")
        else:
            print("‚ö† Telegram –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        return True
        
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False


def test_url_detection():
    """–¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Å–∞–π—Ç–∞ –ø–æ URL"""
    print("\n" + "=" * 60)
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Å–∞–π—Ç–∞")
    print("=" * 60)
    
    from main import ProductionRunner
    runner = ProductionRunner()
    
    test_urls = [
        ("https://www.kleinanzeigen.de/s-wohnung-mieten/darmstadt/k0c203l4888", "kleinanzeigen"),
        ("https://www.immowelt.de/liste/darmstadt/wohnungen/mieten", "immowelt"),
        ("https://www.ebay-kleinanzeigen.de/s-wohnung/berlin/k0c203", "kleinanzeigen"),
    ]
    
    all_correct = True
    for url, expected_type in test_urls:
        detected_type = runner.detect_site_type(url)
        status = "‚úì" if detected_type == expected_type else "‚úó"
        print(f"{status} {url[:50]}... -> {detected_type}")
        if detected_type != expected_type:
            all_correct = False
            print(f"  –û–∂–∏–¥–∞–ª–æ—Å—å: {expected_type}, –ø–æ–ª—É—á–µ–Ω–æ: {detected_type}")
    
    return all_correct


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("\nüß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø–∞—Ä—Å–µ—Ä–æ–≤\n")
    
    results = []
    
    # –¢–µ—Å—Ç Kleinanzeigen
    results.append(("Kleinanzeigen Parser", test_kleinanzeigen()))
    
    # –¢–µ—Å—Ç Immowelt
    results.append(("Immowelt Parser", test_immowelt()))
    
    # –¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è URL
    results.append(("URL Detection", test_url_detection()))
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 60)
    print("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤")
    print("=" * 60)
    
    for test_name, result in results:
        status = "‚úì PASSED" if result else "‚úó FAILED"
        print(f"{status}: {test_name}")
    
    all_passed = all(result for _, result in results)
    
    if all_passed:
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return 0
    else:
        print("\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        return 1


if __name__ == "__main__":
    sys.exit(main())
