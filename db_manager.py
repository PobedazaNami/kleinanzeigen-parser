#!/usr/bin/env python3
"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä—Å–µ—Ä–∞ Kleinanzeigen
"""

import sqlite3
import json
from datetime import datetime
import sys

class DatabaseManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self, db_path: str = "listings.db"):
        self.db_path = db_path
        self.conn = sqlite3.connect(db_path)
        self.cursor = self.conn.cursor()
    
    def show_stats(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        print("=== –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ===\n")
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        self.cursor.execute("SELECT COUNT(*) FROM listings")
        total = self.cursor.fetchone()[0]
        print(f"–í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {total}")
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.cursor.execute("SELECT COUNT(*) FROM listings WHERE notified = 1")
        notified = self.cursor.fetchone()[0]
        print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {notified}")
        
        # –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞
        self.cursor.execute("SELECT AVG(price) FROM listings WHERE price IS NOT NULL")
        avg_price = self.cursor.fetchone()[0]
        if avg_price:
            print(f"–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {avg_price:.0f}‚Ç¨")
        
        # –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω
        self.cursor.execute("SELECT MIN(price), MAX(price) FROM listings WHERE price IS NOT NULL")
        min_price, max_price = self.cursor.fetchone()
        if min_price and max_price:
            print(f"–î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω: {min_price}‚Ç¨ - {max_price}‚Ç¨")
        
        # –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
        self.cursor.execute("SELECT title, date_found FROM listings ORDER BY date_found DESC LIMIT 1")
        result = self.cursor.fetchone()
        if result:
            title, date_found = result
            print(f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ: {title} ({date_found})")
        
        print()
    
    def list_recent(self, limit: int = 10):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
        print(f"=== –ü–æ—Å–ª–µ–¥–Ω–∏–µ {limit} –æ–±—ä—è–≤–ª–µ–Ω–∏–π ===\n")
        
        self.cursor.execute("""
            SELECT title, price, size, location, date_found, notified 
            FROM listings 
            ORDER BY date_found DESC 
            LIMIT ?
        """, (limit,))
        
        results = self.cursor.fetchall()
        
        for i, (title, price, size, location, date_found, notified) in enumerate(results, 1):
            status = "‚úÖ" if notified else "‚ùå"
            price_str = f"{price}‚Ç¨" if price else "–ù/–î"
            size_str = f"{size}–º¬≤" if size else "–ù/–î"
            
            print(f"{i}. {status} {title}")
            print(f"   üí∞ {price_str} | üìê {size_str} | üìç {location}")
            print(f"   üïí {date_found}")
            print()
    
    def search_listings(self, query: str, limit: int = 10):
        """–ü–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É"""
        print(f"=== –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: '{query}' ===\n")
        
        self.cursor.execute("""
            SELECT title, price, size, location, url, date_found 
            FROM listings 
            WHERE title LIKE ? OR description LIKE ? OR location LIKE ?
            ORDER BY date_found DESC 
            LIMIT ?
        """, (f"%{query}%", f"%{query}%", f"%{query}%", limit))
        
        results = self.cursor.fetchall()
        
        if not results:
            print("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        for i, (title, price, size, location, url, date_found) in enumerate(results, 1):
            price_str = f"{price}‚Ç¨" if price else "–ù/–î"
            size_str = f"{size}–º¬≤" if size else "–ù/–î"
            
            print(f"{i}. {title}")
            print(f"   üí∞ {price_str} | üìê {size_str} | üìç {location}")
            print(f"   üîó {url}")
            print(f"   üïí {date_found}")
            print()
    
    def clean_old_listings(self, days: int = 30):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π"""
        from datetime import datetime, timedelta
        
        cutoff_date = (datetime.now() - timedelta(days=days)).isoformat()
        
        self.cursor.execute("SELECT COUNT(*) FROM listings WHERE date_found < ?", (cutoff_date,))
        count = self.cursor.fetchone()[0]
        
        if count == 0:
            print(f"–ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å—Ç–∞—Ä—à–µ {days} –¥–Ω–µ–π")
            return
        
        confirm = input(f"–£–¥–∞–ª–∏—Ç—å {count} –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å—Ç–∞—Ä—à–µ {days} –¥–Ω–µ–π? (y/N): ").lower()
        if confirm in ['y', 'yes', '–¥–∞']:
            self.cursor.execute("DELETE FROM listings WHERE date_found < ?", (cutoff_date,))
            self.conn.commit()
            print(f"–£–¥–∞–ª–µ–Ω–æ {count} —Å—Ç–∞—Ä—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
        else:
            print("–û—Ç–º–µ–Ω–µ–Ω–æ")
    
    def export_to_json(self, filename: str = None):
        """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ JSON"""
        if not filename:
            filename = f"listings_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        
        self.cursor.execute("SELECT * FROM listings")
        results = self.cursor.fetchall()
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
        columns = [description[0] for description in self.cursor.description]
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
        data = []
        for row in results:
            data.append(dict(zip(columns, row)))
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=2, ensure_ascii=False)
        
        print(f"–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(data)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ —Ñ–∞–π–ª: {filename}")
    
    def reset_notifications(self):
        """–°–±—Ä–æ—Å —Ñ–ª–∞–≥–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        self.cursor.execute("SELECT COUNT(*) FROM listings WHERE notified = 1")
        count = self.cursor.fetchone()[0]
        
        if count == 0:
            print("–ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —Ñ–ª–∞–≥–∞–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            return
        
        confirm = input(f"–°–±—Ä–æ—Å–∏—Ç—å —Ñ–ª–∞–≥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è {count} –æ–±—ä—è–≤–ª–µ–Ω–∏–π? (y/N): ").lower()
        if confirm in ['y', 'yes', '–¥–∞']:
            self.cursor.execute("UPDATE listings SET notified = 0")
            self.conn.commit()
            print(f"–§–ª–∞–≥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–±—Ä–æ—à–µ–Ω—ã –¥–ª—è {count} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
        else:
            print("–û—Ç–º–µ–Ω–µ–Ω–æ")
    
    def close(self):
        """–ó–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        self.conn.close()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) < 2:
        print("–£—Ç–∏–ª–∏—Ç–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö Kleinanzeigen Parser")
        print("\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python db_manager.py stats           - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
        print("  python db_manager.py recent [N]      - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –æ–±—ä—è–≤–ª–µ–Ω–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10)")
        print("  python db_manager.py search <query>  - –ü–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
        print("  python db_manager.py clean [days]    - –û—á–∏—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—à–µ N –¥–Ω–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30)")
        print("  python db_manager.py export [file]   - –≠–∫—Å–ø–æ—Ä—Ç –≤ JSON")
        print("  python db_manager.py reset-notify    - –°–±—Ä–æ—Å–∏—Ç—å —Ñ–ª–∞–≥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        return
    
    db = DatabaseManager()
    
    try:
        command = sys.argv[1].lower()
        
        if command == "stats":
            db.show_stats()
        
        elif command == "recent":
            limit = int(sys.argv[2]) if len(sys.argv) > 2 else 10
            db.list_recent(limit)
        
        elif command == "search":
            if len(sys.argv) < 3:
                print("–£–∫–∞–∂–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
                return
            query = " ".join(sys.argv[2:])
            db.search_listings(query)
        
        elif command == "clean":
            days = int(sys.argv[2]) if len(sys.argv) > 2 else 30
            db.clean_old_listings(days)
        
        elif command == "export":
            filename = sys.argv[2] if len(sys.argv) > 2 else None
            db.export_to_json(filename)
        
        elif command == "reset-notify":
            db.reset_notifications()
        
        else:
            print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
    
    finally:
        db.close()

if __name__ == "__main__":
    main()