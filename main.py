#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Kleinanzeigen Parser - Production Entry Point
–ü–∞—Ä—Å–µ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏–π Kleinanzeigen –∏ Immowelt –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä –≤ –∞—Ä–µ–Ω–¥—É
"""

import logging
from logging.handlers import RotatingFileHandler
import sys
import os
import json
import time
import signal
from datetime import datetime
from pathlib import Path
from urllib.parse import urlparse
from typing import Dict, List

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from kleinanzeigen_parser import KleinanzeigenParser
from immowelt_parser import ImmoweltParser

class ProductionRunner:
    """–ö–ª–∞—Å—Å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ"""
    
    def __init__(self):
        self.parsers = []  # –°–ø–∏—Å–æ–∫ –ø–∞—Ä—Å–µ—Ä–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–∞–π—Ç–æ–≤
        self.logger = None
        self.running = True
        self.setup_logging()
        self.setup_signal_handlers()
        
    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤
        logs_dir = Path(__file__).parent / "logs"
        logs_dir.mkdir(exist_ok=True)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º root logger
        self.logger = logging.getLogger("kleinanzeigen_parser")
        self.logger.setLevel(logging.INFO)
        
        # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        for handler in self.logger.handlers[:]:
            self.logger.removeHandler(handler)
        
        # –§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –ª–æ–≥–æ–≤
        formatter = logging.Formatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(funcName)s:%(lineno)d - %(message)s',
            datefmt='%Y-%m-%d %H:%M:%S'
        )
        
        # –§–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π (–≥–ª–∞–≤–Ω—ã–π –ª–æ–≥)
        file_handler = RotatingFileHandler(
            logs_dir / "parser.log",
            maxBytes=10*1024*1024,  # 10MB
            backupCount=5,
            encoding='utf-8'
        )
        file_handler.setLevel(logging.INFO)
        file_handler.setFormatter(formatter)
        self.logger.addHandler(file_handler)
        
        # –§–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—à–∏–±–æ–∫
        error_handler = RotatingFileHandler(
            logs_dir / "errors.log",
            maxBytes=5*1024*1024,   # 5MB
            backupCount=3,
            encoding='utf-8'
        )
        error_handler.setLevel(logging.ERROR)
        error_handler.setFormatter(formatter)
        self.logger.addHandler(error_handler)
        
        # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        console_handler = logging.StreamHandler(sys.stdout)
        console_handler.setLevel(logging.INFO)
        console_handler.setFormatter(logging.Formatter(
            '%(asctime)s - %(levelname)s - %(message)s',
            datefmt='%H:%M:%S'
        ))
        self.logger.addHandler(console_handler)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä—ã –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
        logging.getLogger("requests").setLevel(logging.WARNING)
        logging.getLogger("urllib3").setLevel(logging.WARNING)
        logging.getLogger("telegram").setLevel(logging.WARNING)
        
        self.logger.info("="*60)
        self.logger.info("–°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        self.logger.info(f"–õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤: {logs_dir}")
        self.logger.info("="*60)
    
    def setup_signal_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        def signal_handler(signum, frame):
            self.logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
            self.running = False
            
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
    
    def validate_config(self, config_path="config.json"):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º"""
        self.logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        
        if not os.path.exists(config_path):
            raise FileNotFoundError(f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {config_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        try:
            with open(config_path, 'r', encoding='utf-8') as f:
                config = json.load(f)
        except json.JSONDecodeError as e:
            raise ValueError(f"–û—à–∏–±–∫–∞ –≤ JSON –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        required_params = {
            'search_urls': list,
            'telegram': dict,
            'filters': dict,
            'database': dict,
            'monitoring': dict,
            'date_filtering': dict
        }
        
        for param, expected_type in required_params.items():
            if param not in config:
                raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä: {param}")
            if not isinstance(config[param], expected_type):
                raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ {param}: –æ–∂–∏–¥–∞–µ—Ç—Å—è {expected_type.__name__}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        telegram_config = config['telegram']
        if not telegram_config.get('bot_token'):
            raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç telegram.bot_token")
        if not telegram_config.get('chat_id'):
            raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç telegram.chat_id")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º URL'—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
        if not config['search_urls']:
            raise ValueError("–°–ø–∏—Å–æ–∫ search_urls –ø—É—Å—Ç")
        
        self.logger.info("‚úì –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞")
        return config
    
    def detect_site_type(self, url: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å–∞–π—Ç–∞ –ø–æ URL"""
        parsed_url = urlparse(url)
        domain = parsed_url.netloc.lower()
        
        if 'kleinanzeigen.de' in domain or 'ebay-kleinanzeigen.de' in domain:
            return 'kleinanzeigen'
        elif 'immowelt.de' in domain:
            return 'immowelt'
        else:
            self.logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–∞–π—Ç–∞ –¥–ª—è URL: {url}, –∏—Å–ø–æ–ª—å–∑—É–µ–º kleinanzeigen –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            return 'kleinanzeigen'
    
    def group_urls_by_site(self, urls: List[str]) -> Dict[str, List[str]]:
        """–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ URL –ø–æ —Ç–∏–ø–∞–º —Å–∞–π—Ç–æ–≤"""
        grouped = {
            'kleinanzeigen': [],
            'immowelt': []
        }
        
        for url in urls:
            site_type = self.detect_site_type(url)
            grouped[site_type].append(url)
        
        return grouped
    
    def check_dependencies(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        self.logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        
        required_modules = [
            'requests', 'bs4', 'telegram', 'schedule', 
            'sqlite3', 'lxml', 'urllib3'
        ]
        
        missing_modules = []
        for module in required_modules:
            try:
                __import__(module)
            except ImportError:
                missing_modules.append(module)
        
        if missing_modules:
            raise ImportError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –º–æ–¥—É–ª–∏: {', '.join(missing_modules)}")
        
        self.logger.info("‚úì –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    
    def run(self):
        """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
        try:
            self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ Multi-Site Parser –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω —Ä–µ–∂–∏–º–µ")
            self.logger.info(f"–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now()}")
            self.logger.info(f"Python –≤–µ—Ä—Å–∏—è: {sys.version}")
            self.logger.info(f"–†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            self.check_dependencies()
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            config = self.validate_config()
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º URL –ø–æ —Ç–∏–ø–∞–º —Å–∞–π—Ç–æ–≤
            grouped_urls = self.group_urls_by_site(config['search_urls'])
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Å–∞–π—Ç–∞
            self.parsers = []
            
            if grouped_urls['kleinanzeigen']:
                self.logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ –¥–ª—è Kleinanzeigen ({len(grouped_urls['kleinanzeigen'])} URL)")
                kleinanzeigen_config = config.copy()
                kleinanzeigen_config['search_urls'] = grouped_urls['kleinanzeigen']
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è kleinanzeigen
                with open('config_kleinanzeigen_temp.json', 'w', encoding='utf-8') as f:
                    json.dump(kleinanzeigen_config, f, ensure_ascii=False, indent=2)
                
                kleinanzeigen_parser = KleinanzeigenParser("config_kleinanzeigen_temp.json")
                self.parsers.append(('Kleinanzeigen', kleinanzeigen_parser))
            
            if grouped_urls['immowelt']:
                self.logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ –¥–ª—è Immowelt ({len(grouped_urls['immowelt'])} URL)")
                immowelt_config = config.copy()
                immowelt_config['search_urls'] = grouped_urls['immowelt']
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è immowelt
                with open('config_immowelt_temp.json', 'w', encoding='utf-8') as f:
                    json.dump(immowelt_config, f, ensure_ascii=False, indent=2)
                
                immowelt_parser = ImmoweltParser("config_immowelt_temp.json")
                self.parsers.append(('Immowelt', immowelt_parser))
            
            if not self.parsers:
                raise ValueError("–ù–µ —Å–æ–∑–¥–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ URL –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —á–µ—Ä–µ–∑ –ø–µ—Ä–≤—ã–π –ø–∞—Ä—Å–µ—Ä
            self.logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
            test_message = f"üü¢ Multi-Site Parser –∑–∞–ø—É—â–µ–Ω\n–°–∞–π—Ç—ã: {', '.join([name for name, _ in self.parsers])}\n–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            self.parsers[0][1].send_telegram_sync(test_message)
            
            self.logger.info("‚úì –ü–∞—Ä—Å–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            self.logger.info("üì° –ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–±—ä—è–≤–ª–µ–Ω–∏–π...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
            while self.running:
                try:
                    self.logger.info("--- –ù–∞—á–∞–ª–æ —Ü–∏–∫–ª–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ ---")
                    start_time = time.time()
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ø–∞—Ä—Å–µ—Ä—ã
                    for site_name, parser in self.parsers:
                        try:
                            self.logger.info(f"üîÑ –ü–∞—Ä—Å–∏–Ω–≥ {site_name}...")
                            parser.parse_listings()
                        except Exception as e:
                            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ {site_name}: {e}", exc_info=True)
                    
                    execution_time = time.time() - start_time
                    self.logger.info(f"--- –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {execution_time:.2f} —Å–µ–∫ ---")
                    
                    # –ñ–¥–µ–º 30 –º–∏–Ω—É—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
                    if self.running:
                        self.logger.info("‚è∞ –û–∂–∏–¥–∞–Ω–∏–µ 30 –º–∏–Ω—É—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞...")
                        for i in range(1800):  # 30 * 60 = 1800 —Å–µ–∫—É–Ω–¥
                            if not self.running:
                                break
                            time.sleep(1)
                            
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                            if i % 300 == 0 and i > 0:
                                remaining_minutes = (1800 - i) // 60
                                self.logger.info(f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å {remaining_minutes} –º–∏–Ω—É—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞")
                    
                except KeyboardInterrupt:
                    self.logger.info("–ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                    break
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}", exc_info=True)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                    try:
                        error_message = f"üî¥ –û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ –ø–∞—Ä—Å–µ—Ä–∞:\n{str(e)}"
                        if self.parsers:
                            self.parsers[0][1].send_telegram_sync(error_message)
                    except:
                        pass
                    
                    # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                    self.logger.info("‚è∞ –û–∂–∏–¥–∞–Ω–∏–µ 5 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                    time.sleep(300)
        
        except Exception as e:
            self.logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}", exc_info=True)
            
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
            try:
                if self.parsers:
                    error_message = f"üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–∞—Ä—Å–µ—Ä–∞:\n{str(e)}"
                    self.parsers[0][1].send_telegram_sync(error_message)
            except:
                pass
                
            sys.exit(1)
        
        finally:
            self.logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø–∞—Ä—Å–µ—Ä–∞")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            try:
                if self.parsers:
                    shutdown_message = f"‚ö™ Multi-Site Parser –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
                    self.parsers[0][1].send_telegram_sync(shutdown_message)
            except:
                pass
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥–∏
            for temp_config in ['config_kleinanzeigen_temp.json', 'config_immowelt_temp.json']:
                if os.path.exists(temp_config):
                    os.remove(temp_config)
    
    def run_single(self):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–¥–∏–Ω —Ü–∏–∫–ª –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å"""
        try:
            self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ Multi-Site Parser –≤ single-run —Ä–µ–∂–∏–º–µ")
            self.logger.info(f"–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now()}")
            self.logger.info(f"Python –≤–µ—Ä—Å–∏—è: {sys.version}")
            self.logger.info(f"–†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            self.logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
            self.check_dependencies()
            self.logger.info("‚úì –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            self.logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
            config = self.validate_config()
            self.logger.info("‚úì –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞")
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º URL –ø–æ —Ç–∏–ø–∞–º —Å–∞–π—Ç–æ–≤
            grouped_urls = self.group_urls_by_site(config['search_urls'])
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Å–∞–π—Ç–∞
            self.parsers = []
            
            if grouped_urls['kleinanzeigen']:
                self.logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ –¥–ª—è Kleinanzeigen ({len(grouped_urls['kleinanzeigen'])} URL)")
                kleinanzeigen_config = config.copy()
                kleinanzeigen_config['search_urls'] = grouped_urls['kleinanzeigen']
                
                with open('config_kleinanzeigen_temp.json', 'w', encoding='utf-8') as f:
                    json.dump(kleinanzeigen_config, f, ensure_ascii=False, indent=2)
                
                kleinanzeigen_parser = KleinanzeigenParser("config_kleinanzeigen_temp.json")
                self.parsers.append(('Kleinanzeigen', kleinanzeigen_parser))
            
            if grouped_urls['immowelt']:
                self.logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ –¥–ª—è Immowelt ({len(grouped_urls['immowelt'])} URL)")
                immowelt_config = config.copy()
                immowelt_config['search_urls'] = grouped_urls['immowelt']
                
                with open('config_immowelt_temp.json', 'w', encoding='utf-8') as f:
                    json.dump(immowelt_config, f, ensure_ascii=False, indent=2)
                
                immowelt_parser = ImmoweltParser("config_immowelt_temp.json")
                self.parsers.append(('Immowelt', immowelt_parser))
            
            if not self.parsers:
                raise ValueError("–ù–µ —Å–æ–∑–¥–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ URL –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram
            self.logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
            test_message = f"üü¢ Multi-Site Parser –∑–∞–ø—É—â–µ–Ω (single-run)\n–°–∞–π—Ç—ã: {', '.join([name for name, _ in self.parsers])}\n–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            self.parsers[0][1].send_telegram_sync(test_message)
            
            self.logger.info("‚úì –ü–∞—Ä—Å–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            self.logger.info("üì° –í—ã–ø–æ–ª–Ω—è–µ–º –æ–¥–∏–Ω —Ü–∏–∫–ª –ø–∞—Ä—Å–∏–Ω–≥–∞...")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–¥–∏–Ω —Ü–∏–∫–ª
            self.logger.info("--- –ù–∞—á–∞–ª–æ —Ü–∏–∫–ª–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ ---")
            start_time = time.time()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ø–∞—Ä—Å–µ—Ä—ã
            for site_name, parser in self.parsers:
                try:
                    self.logger.info(f"üîÑ –ü–∞—Ä—Å–∏–Ω–≥ {site_name}...")
                    parser.parse_listings()
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ {site_name}: {e}", exc_info=True)
            
            elapsed_time = time.time() - start_time
            self.logger.info(f"--- –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {elapsed_time:.2f} —Å–µ–∫ ---")
            self.logger.info("‚úÖ Single-run –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            self.logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
            
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
            try:
                if self.parsers:
                    error_message = f"üî¥ –û–®–ò–ë–ö–ê –≤ single-run —Ä–µ–∂–∏–º–µ:\n{str(e)}"
                    self.parsers[0][1].send_telegram_sync(error_message)
            except:
                pass
                
            sys.exit(1)
        
        finally:
            self.logger.info("üõë Single-run –∑–∞–≤–µ—Ä—à–µ–Ω")
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥–∏
            for temp_config in ['config_kleinanzeigen_temp.json', 'config_immowelt_temp.json']:
                if os.path.exists(temp_config):
                    os.remove(temp_config)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    import argparse
    
    parser = argparse.ArgumentParser(description='Multi-Site Apartment Parser (Kleinanzeigen + Immowelt)')
    parser.add_argument('--single-run', action='store_true', 
                       help='–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ü–∏–∫–ª –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ –≤—ã–π—Ç–∏')
    args = parser.parse_args()
    
    if args.single_run:
        print("Multi-Site Parser - Single Run Mode")
    else:
        print("Multi-Site Parser - Production Mode")
    print("=" * 50)
    
    try:
        runner = ProductionRunner()
        if args.single_run:
            runner.run_single()
        else:
            runner.run()
    except KeyboardInterrupt:
        print("\n–ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()